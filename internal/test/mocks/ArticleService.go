// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	entity "article-web-service/internal/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ArticleService is an autogenerated mock type for the ArticleService type
type ArticleService struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ArticleService) FindByID(ctx context.Context, id int) (entity.Article, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.Article
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Article); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Article)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, keyword, author
func (_m *ArticleService) Search(ctx context.Context, keyword string, author string) ([]entity.Article, error) {
	ret := _m.Called(ctx, keyword, author)

	var r0 []entity.Article
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []entity.Article); ok {
		r0 = rf(ctx, keyword, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, keyword, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, _a1
func (_m *ArticleService) Store(ctx context.Context, _a1 *entity.Article) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Article) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
